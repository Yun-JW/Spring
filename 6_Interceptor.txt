6_Interceptor

@@@ Controller를 @Controller로 @@@
- ControllerHelper
	setCookie만 필요
- @Controller 추가
- extends HttpServlet 제거
	implements ControllerHelper는 유지(cookie 생성)
	service()에서 사용했던 action 파라미터들을 path로 활용하는 handler 메서드로 변경
- handler method
	HttpServletRequest 사용 지양 > Model과 @RequestParam, @ModelAttribute 적극 사용
	HttpServletResponse 사용 ? > 쿠키 생성 시
	ServletException, IOException 처리 제거
	action 값을 경로로 변경
-open api  키 관리
	application.properties에서 정의 한 후
	Controller에서 property 내용 확인하기

<<< JSP 공통 사항 >>>
-"/fragments/" > "WEB-INF/view/fragments/"로 replace
-모든 href에서 command를 path로 변경: ?action= > /
	Query string 부분에서 ? 조정
- Form에 적용된 action 수정
	name="action" 검색 후 수정



@@@ Interceptor @@@
<<< Handler Interceptor >>>
- DispatcherServlet이 HandlerAdapter를 호출하기 전/후 등에 거치는 일종의 필터
	Servlet 필터와 유사한 개념: 여러 controller에서 공통적으로 사용되는 기능 정의
		response header 설정, request 감사, 성능 축정, 인증 확인 등
	Spring의 빈으로 사용 가능
		다른 빈 주입 등 다양한 잇점 제공
- 주요 메서드와 동작
	HttpServletRequest, HttpServletResponse, @Controller 객체, ModelAndView, Exception 까지 모두 제공 받을 수 있음
	preHandle(), postHandle(), afterCompletion() 3가지가 있음

<<< 여러 개의 Handler Interceptor가 설정되었을 경우의 동작 >>>
- 하나의 controller에 여러 개의 interceptor가 등록될 수 있음
- preHandle은 등록된 순서로 호출
- postHandle과 afterCompletion은 역순으로 호출 됨

<<< WebMvcConfigure interface >>>
- 웹 동작과 괄년된 빈 관리 및 설정
- 다양한 기능을 정의해 놓은 default 메서드 포함
	필요한 기능이 있을 경우 재 정의

<<< @Controller 메서드에 HandlerInterceptor 적용 >>>
- 적용 방식
	패스 생략 시 : 모든 요청에 일괄 적용
	특정 패스를 추가/제외 가능
	ANT 경로 패턴 사용 가능
- ANT 경로 패턴
	경로를 구분하는 특수문자
	? : 1개의 글자
	* : 0개 이상의 글자
	** : 0개 이상의 디렉터리

<<< view controller >>>
-controller 필요 없이 단순히 view만 존재하는 경우
	Path로 요청 받으면 view-name을 viwResolver에게 바로 넘겨줌

<<< Servlet Filter vs AOP vs Interceptor >>>
- Servlet Filter : spring과 무관하며 DispatcherServlet 호출 이전에 동작
	스프링과의 협업은 어렵고 단지 ServletRequest, ServletResponse에 대한 전/후 처리
- HandlerInterceptor : Spring에서 관리하며 DispatcherServlet 이후 동작
	Spring의 빈으로 injection 등 모든 기능 사용 가능
	controller에 대한 부가 작업이 필요한 경우
- AOP : HTTP 관련 작업을 처리하기 위한 처리하기 어려움
	일반적으로 Service, DAO에 적합

@@@ 예외처리 @@@
<<<web.xml을 통한 전역 처리>>>

<<<SpringBoot의 error page 연결 >>>
- 기본적으로 /error/[error_code].jsp 파일이 있다면 해당 핑일로 연결, 없다면 whitable error page로 연결
- whiteable error page에서 출력 내용 조절 가능

<<< BasicErrorCOntroller 활용 >>>
- 자료 참조


@@@ File Upload @@@

<<< 전송 방식 >>>
- Form 전송
	이미지는 대용량이므로 반드시 post로 전송한다 enctype="nultipart/form-data 속성이 반드시 필요

<<<application.properties>>>

<<<Controller >>>

<<<클리이언트 처리>>>
- <a>의 download 속성 활용
- WebMvcConfigurer 설정

@@@ APPENDIX: Ajax와 Base64 @@@
<<<Blob 처리>>>
- Base64 형태의 데이터를 img로 출력하기 위해 "data:image/jpeg;base64,"를 prefix로 추가



