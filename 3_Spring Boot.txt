3_Spring Boot 

@@@  Spring Boot @@@
- 또 다른 스프링이 아니라 스프링 애플리케이션을 개발하는 일종의 템플릿
- 설정 자동화를 통해 스프링 개발 속도 향상
- 단위 테스트 강화로 프로젝트 안정성 강화
- 개발자는 좀 더 비지니스 로직에 집중
#비지니스 로직 : 애플리케이션이나 시스템이 해결하려는 실제 문제의 핵심 규칙이나 처리 과정을 말한다.
#레거시(Legacy) : 오래된 시스템이나 코드

@ 프로젝트 구조 @
-일반적인 자바 코드(src/main/java)
- 자바 이외의 리소스(src/main/resources)
	정적 웹 리소스(static)
	동적 웹 리소스(templates)
	애플리케이션 설정 정보(application.properties)
-테스팅 관련 소스 및 리소스(src/test/java)
- 프로젝트 구성정보 (pom.xml)

@ application.properties @
- application 동작에 필요한 property 설정 : application.properties or application.yml 형태로 작성
- 작성 방법은 다르지만 프로그램 내부에서의 동작은 동일
- .properties 작성법 : property와 value는 =로 구분
	(예시)
	server.port=8080
	spring.application.name=MySpringApp
	app.name=GPT온라인
- 코드에서의 속성 활용: @Value("${property_name}")으로 속성 활용 >>> Scalar를 주입받는다.
	필요한 타입으로 자동 형 변환 가능
#Autowired : Type 기반으로 Bean을 주입받는다.
#logger : 로그를 출력하기 위한 도구 / 시스템의 실행흐름이나 상태를 기록하는 도구
# log.debug("debug: {}", roles); >>> roles 변수의 값을 로그로 출력, {} placeholder 뒤의 변수와 자동 매핑
					

@ built-in property @
- built-in property란 미리 만들어진 property이다.
- core Properties
- Server Properties

@ pom.xml 분석 @
- <properties> </properties>  // 변수에 대한 선언 
	<java.version>17</java.version> // java.version이라는 변수에 값 17이 들어감
- SpringBoot는 dependecy의 버전은 parent로부터 가져온다(Boot는 계층 구조를 가짐)
	미리 스타터에 환경설정이 되어있어서 그것들을 가져온다.
	스타터에 라이브러리가 없는경우에는 버전을 명시해야
	Q : 스타터에 라이브러리가 있는지 없는지 하나하나 확인해야해?
	A : NO, 버전을 명시하고 오류가 뜨면 해당 버전 코드를 삭제하면 

@SpringBootApplication
- SpringBoot 애플리케이션의 시적점인 클래스에 선언하는 애너테이션
- 내부적으로 @SpringBootConfiguration, @EnableAutoConfiguration, @ComponentScan을 가짐

@SpringBootConfiguration
- 내부적으로 @Configuration을 가짐 ( 빈 등록 등을 처리할 수 있는 근거)
	하지만 일반적으로 전용의 설정 파일을 생성 권장

@EnableAutoConfiguration
- 의존성에 근거해서 자동 설정 지원

- ServletWebSeverFactoryAutoConfiguration
	@ConditionalOnClass(ServletRequest.class) 자동 설정의 조건들
	@ConditionalOnWebApplication(type = Type.SERVLET)
	@EnableConfigurationProperties(ServerProperties.class) 설정 가능한 property 들 초기

@ComponentScan : 묵시적 빈 등록 형태로 선언된 빈 scan
	언제나 @SpringBootApplication이 선언된 클래스의 하위 패키지 scan 중

@SpringBootTest
- 스프링 애플리케이션의 통합 테스트를 위한 애너테이션
- slice test 권장
	통합 테스트는 애플리케이션 전체를 구동시킴으로 특정 동작에 대한 단위 테스트에는 부적합
	실무에서는 번거롭고 복잡하지만 필요한 모듈만 로딩해서 테스트하는 slice test 권장 


@@@ Spring Hrm @@@

@ 스프링에서 일반적을 빈으로 관리할 대상들은?
	일회용 :  DTO
	재사용 :  Controller, filter, Dao, Service, Util

@ Scope : 빈 객체가 어떤 범위까지 존재할 것인가?
- 스프링 컨테이너가 빈 객체를 어떻게 생성하고 언제까지 관리할 것인지를 결정
- singleton은 bean의 기본 scope로 생략 가능
1. singleton : 애플리케이션 당 1개의 bean 인스턴스만 생성, 스프링 컨테이너가 시작할 때 생성됨
2. prototype : 요청할 때마다 새로운 bean 인스턴스 생성, 주로 상태를 가지는 객체에 사용
3. request : HTTP 요청마다 하나의 Bean 생성, 웹 애플리케이션에서만 사용 가능
4. session : HTTP 세션마다 하나의 Bean 생성, 로그인 사용자마다 객체가 따로 있

@ 스코프 별 특징
- Singleton Scope : 비지니스 로직을 재사용하기 위해 빈을 관리하는 scope
	stateless해서 개별적으로 구분될 필요가 없기 때문에 singleton 개념으로 하나만 만들어서 관리
	빈의 기본 scope로 @Scope를 생략하면 적용
- Prototype Scope : Singleton Scope와 달리 요청 할 때 마다 매번 새로운 빈 객체 생성
	stateful 하게 각 빈이 독립적인 상태를 유지해야 하는 경우 적합
	재사용되지 않으므로 꼭 빈으로 만들어야 하는지 고민할 필요
	스프링 빈으로써의 장점을 얻을 수 있음
- Request Scope, Session Scope
	각각 웹 환경에서 사용되는 scope로 request, session이 유지될 동안 존재해야 하는 빈 객체 생성
	만들려는 목적은 Prototype Scope와 유사

#stateless : 서버가 이전 요청의 상태를 저장하지 않는 방식
# lombok : 반복되는 Java코드를 자동으로 생성해주는 라이브러리

@ 자주 사용하는 annotation
@Getter / @Setter : 멤버 변수에 대한 getter / setter 메서드 생성
@ToString : toString() 메서드 재정의
@EqualsAndHashCode : equals()와 hashCode() 재정의
@NonNull : 객체형에 대해 Null 값 불가 표시, null 체크 로직 삽입
@AllArgsConstructor : 모든 멤버 변수를 파라미터로 하는 생성자 생성
@NoArgsConstructor : 기본 생성자 명시적으로 생성
@RequredArgsConstructor : final 및 @NonNull 멤버 변수를 이용한 생성자 생성
@Data : @ToString, @EqualsAndHashCode, @Getter, @Setter, @RequiredArgsConstructor 적용
		@RequiredArgsConstructor는 다른 생성자가 없을 때만
@Builder : 빌더 패턴을 통한 객체 생성 지원
@Slf4j : Slf4j의 Logger 타입 변수 log 생성(Simple Logging Facade for Java)
#Slf4j : 다양한 로깅 프레임워크를 통합해서 쓸 수 있게 해주는 로깅 인터페이스

@ @Data 사용 주의
 @Data는 많은 코드를 부지불식 간에 만들기 때문에 생각지 않았던 문제 발생 가능 - @ToString의 순환 참조 문제
	@ToString.Exclude, @EqualsAndHashCode.Exclude 사용하면 됨

@ 생성자 관리
- @Builder : 생성자의 파라미터를 바탕으로 builder 패턴 형식으로 객체 설정
	클래스 레벨에 선언할 때는 전체 생성자가 필요
	생성자 레벨에 선언할 떄는 생성자의 파라미터를 대상으로 builder 구성

- @Builder의 default 값
	@AllArgsConstructor에 적용된 @Builder는 내부적으로 모든 field의 값을 default 초기화 해버림
	기본값을 유지하기 위해서 @Builder.Default 활용

@DBUtil은 재사용 가능한 컴포넌트
- @Component
- singleton은 spring framework 차원에서 지원 - 빈은 POJO로 구성

@ Dao의 빈 구성
- stereo type annotation 적용 : @Repository
- singleton은 spring framework 차원에서 지원 - 빈은 POJO로 구성

#stereotype annotation 이란? 스프링 컨테이너에 bean으로 등록하기 위해 사용하는 대표적인 클래스 수준의 에너테이션

@ Service의 빈 구성
- stereo type annotation 적용 : @Service
- singleton은 spring framework 차원에서 지원 - 빈은 POJO로 구성
- service는, DBUtio, dao(==repository)를 반드시 필요한 의존성으로 가짐
	final field로 구성하고 @RequiredArgsConstructor 적용

@ Controller 수정
- 아직 웹 서비스는 불가하지만 컴파일을 위해 기존 코드 변경분만 반영




