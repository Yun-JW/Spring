5_SpringMVC

@@@ Spring@MVC개요 @@@

<<< Spring MVC란 ? >>>
- MVC기반의 Web Application을 작성하기 위한 Spring Framework의 하위 모듈
- front controller pattern : DispatcherServlet
	/ 경로를 처리하므로 모든 요청을 받아들임
	action parameter 방식이 아닌 URL 기반으로 요청 분기
- 주요 특징
	애너테이션 기반 >>> Spring@MVC
	다양한 view 지원
	restful 웹 서비스 지원
	테스트 용이

<<< Spring@MVC 구성 요소 >>>
- DispatcherServlet(spring-webmvc의 org.springframework.web.servlet.DispatchServlet)
	Spring@MVC의 가장 중추적인 역할
	Front Controller Pattern의 적용으로 client의 모든 request 접수
	주로 다른 객체들에게 위임하여 처리
- Spring@MVC infrastructure Components
	HandlerMapping >>> 이런 request를 받았는데 어떤 Handler가 처리할 수 있나요?
	HandlerAdpters >>> XXHandler에게 request 좀 처리 해달라고 해~
	ViewResolvers >>> 이런 뷰가 필요한데 부탁해요~
- 프로그래머가 작성할 부분
	model 영역(Service, Dao)
	View page
	Handler

<<< Spring@MVC 흐름 >>>
1. client가 DispatcherServlet에게 request
2. DispatcherServlet이  HandlerMapping에게 Handler 문의 및 리턴
3. DispatcherServlet이 HandlerAdapter에게 request 전달
4. HandlerAdapter가 Handler에게 request 처리 요청
5. Handler가 Service의 비즈니스 로직 수행
6. Handler가 Model에게 View에 전달할 자료 저장
7. Handler가 HandlerAdapter에게, HnadlerAdaper가 DispatcherServlet에게 View 이름 전달
8. DispatcherServlet이 ViwResolver에게 이름 기반 View 문의 및 리턴
9. DispatcherServlet이 View에게 화면 표시 요청
10. View가 Model로부터 정보 참조, 페이지 구성

- Handler: 클라이언트의 HTTP 요청을 실제로 처리하는 객체
	Controller, WebSocketHandler, HttpRequestHandler, ResourceHttpRequestHandler
	Controller는 @Controller로 작성

<<< SpringMVC를 위한 프로젝트 구조 >>>
static : 정적 웹 리고스 (img, css, js, html)
templates : Spring Boot 지원 동적 웹 리소스 (Mustache Thymeleaf)
webapp>WEB-INF>views : JSP를 위한 폴더 구조

<<< 의존성 추가 >>>
<!-- JSP 처리를 위한 tomcat-embed-jasper 추가 -->
<!-- JSTL 처리를 위한 의존성 추가(spec) -->
<!-- JSTL 처리를 위한 의존성 추가(impl) -->


@@@ Controller @@@
<<< Controller >>>
- Handler의 한 종류로 MVC에서 Client의 요청을 받아들이는 역할을 하는 클래스
- Stereo type annotation인 @Controller로 표현
- 다수의 요청 처리 메서드를 포함

<<< @RequestMapping >>>
- 요청 처리 메서드를 작성하기 위한 annotation
	value(=path) 속성을 이용해서 처리할 경로 지정
	클래스 레벨
		클래스에 소속된 모든 요청 처리 메서드 경로의 prefix
	메서드 레벨 
		해당 메서드에만 적용되는 경로
- 요청 방식 (method 지정)
	method 속성을 이용해서 GET / POST 등 매핑
- 축약형
	@GetMapping, @PostMapping

<<< 요청 처리 메서드 >>>
- URL에 기반해서 사용자의 요청을 처리하는 메서드
	@RequestMapping으로 요청과 메서드 연결

<<< MVC로 DispatcherServlet이 받은 요청을 다른 JSP에서 처리 >>>
- forward: 일반적인 형태로 logical view name을 전달하면 forward로 component 전환
- redirect: redirect를 통해 이동하려는 경우 redirect:를 추가
	상대경로, 절대경로 및 외부 사이트 연결 가능

<<< MVC로 DispatcherServlet이 받은 요청을 다른 JSP에서 처리 >>>
- json 방식의 응답 : @ResponseBody 사용

@@@ Controller 단위테스트 @@@
<<< Spring Test MVC >>>
- 기존의 테스팅 : 직접 호출하는 구조로 웹 환경에 대한 설정이 없음
- Mock 환경: 실제 WAS에서 Spring@MVC와 소통하는 부분을 가상으로 제공
	@MockBean(테스트에서 사용하는 애너테이션으로, 테스트 중 스프링의 애플리케이션 컨텍스트 안에 있는 빈을 mack 객체로 교체할 때 사용)

<<<MockMvc의 테스트 구조 : 요청 만들기 > perform(실행) > expect(검증) > do(확인) >>>
- 요청 만들기
	MockMvcRequestBuilders의 static 메서드인 get/post/put/delete/fileUpload 등 활용
	ServletRequest를 구성하기 위해 다양한 메서드 제공
	메서드명 자료 참조
- 검증
	perform의 결과인 ResultActions의 andExpect에 ResultMatcher 전달
	ResultMatcher는 MockMvcResultMatchers의 static 메서드에서 획득
	메서드명 자료 참조
- 확인
	ResultActions의 andDo 메서드에 파라미터로 Resulthandler 전달
	MockMvcResultHandlers의 static 메서드 활용
	ResultActions의 andReturn() 메서드는 MvcResult 객체를 반환하여 역시 추가적인 검증

<<< @ResponseBody 테스트 >>>
- Content type이 application/json인 경우 적용
- JSON 내용 검증을 위해 MockMvcResultMatchers.jsonPaht() 메서드 사용
- 기본 표현식 자료 참조

@@@ Handler 메서드의 파라미터 @@@
<<<Request handling method의 parameter >>>
-다양한 타입의 parameter들이 순서에 상관 없이 필요한 경우 사용됨
-parameter 타입의 종류
	HttpServletRequest, HttpServletResponse, HttpSession
	Model, ModelAttribute, SessionStatus
	Locale

<<< @RequestParam >>>
- HttpServletRequest 객체의 parameter 조회에 사용
	요청 파라미터의 name과 동일한 변수 이름에 파라미터 매핑
	name 속성에 파라미터 이름 지정
	name과 변수명이 일치할 경우 name생략 가능(버전 따라 다를 수 있음)
	타입은 primitive 또는 wrapper 타입
	여러 값의 경우 배열 또는 List/Set 형태로 전달

<<< @ModelAttribute >>>
- 전달된 파라미터들을 DTO의 propert 이름 기반으로 setter와 자동 연결해서 DTO todtjd
	
