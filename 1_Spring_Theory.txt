@@@ Spring(Framework) @@@

@ FrameWork @
- 프레임워크 
	사전적 의미 : Frame을 가지고 하는 작업 또는 구조물의 뼈대나 틀
	SW 적 의미 : 비즈니스 로직이 빠진 뼈대만 갖춰진 반제품 형태의 애플리케이션(기본 구조와 규칙을 가짐)
			기본 구조 : 디렉토리 구조, 라이프 사이클 관리			
			규칙 : 코딩 규약, API 사용 규칙

@ Spring FrameWork @
- 자바 애플리케이션 개발을 위한 경량 프레임워크
- 프레임워크는 비지니스 로직과 무관한 귀찮고 어려우며 모듈화 할 수 있는 일들 담당
- 개발자는 프레임워크에 적합한 비지니스 로직을 공급하는데 집중
- JDBC 작업에서 스프링을 몰랐을 때와 알게 된 후 개발자의 역할 변화
- 스프링은 개발자를 위한 도구 ! 하지만 쉽지 않다
	처음에는 원리 보다는 사용법 위주의 접근 권장

@ Spring Boot @
- 또 다른 스프링이 아니라 스프링 애플리케이션을 개발하는 일종의 템플릿
- 설정 자동화를 통해 스프링 개발 속도 향상
- 단위 테스트 강화로 프로젝트 안정성 강화
- 개발자는 좀 더 비지니스 로직에 집중

@ 주요 특징 @
- POJO 기반의 DI, AOP, PSA
	DI(Dependency Injection : 의존성 주입)
		필요한 객체를 내가 직접 만들지 않고, 스프링이 대신 넣어주는 
		의존성 : 한 객체가 다른 객체의 기능이나 도움 없이는 제대로 동작할 수 없는 관
	AOP(Aspect Oriented Programming : 관점 지향 프로그래밍)
		비즈니스 로직에서 종간 관심사 코드를 분리/모듈화하고 필요한 곳에 적용한다.
		핵심 관심사에 집중
		공통 코드는 따로 빼서 한 번만 작성해 놓는 
	PSA(Portable Service Abstraction : 이식 가능한 서비스 추상화)
		추상화란?	
		어렵고 복잡한 개념을 특정 환경에 종속되지 않고 쉽게 사용할 수 있게 추상화된 레이어 제공
		 JPA를 쓰건 MyBatis를 쓰건 스프링에서 T.X 처리하는 방법은 동일
	POJO(Plain Old Java Object)
		마트 갈 때 필요한 걸 생각해보세요
		DI, AOP, PSA를 하기 위해 이제까지 하던 대로 그냥 평범한 객체를 만들면 된다.
			특정 인터페이스 구현, 상속 등이 필요 없는 일반적인 자바클래스
			특정 프레임워크, 라이브러리에 종속되지 않음
	POJO로 만들면 가독성과 유지보수성이 뛰어나고 단위테스트가 용이

@ logging의 필요성 @
- 디버깅
- 장기간 동작하는 시스템 상태에 대한 기록

@ Slf4j(Simple Logging Facade for java) @
- Slf4j: java에서 logging을 위한 facade
	facade패턴은 라이브러리의 복잡한 구조를 단순화 시켜 인터페이스로 제공하는 패턴(ex JDBC)
	Slf4J의 구현체는 log4j, logback

- 특징
	1. 심각도에 따라 trace < debug < info < warn < error 다섯 단계로 로그 구분
	2. 사용자 설정에 따라 로그 레벨 결정
		trace : trace, debug, info, warn, error 표시 - 개발 과정
		info : info, warn, error만 표시 - 운영 과정
	3. 로그 레이아웃 설정을 통해 다양한 정보 제공
	4. 다양한 Appender 제공

@ JUnit @
- 자바 코드의 단위 테스트 자동화를 위한 프레임워크
- 테스트와 자동화의 필요성
- 의존성 추가 해야 함
- 테스팅 life cycle 관련 기본 annotation (@Test, @BeforeEach, @AfterEach, @BeforeAll, @AfterAll, @DisplayName)

@ assertion @
- 단정문 : 메서드 호출 결과가 예한 값고 동일한지 판단하는 문장
- org.junint.jupiter.api.Assertions에 다양한 assertion 메서드들이 static하게 제공됨
- standard assertion
	대부분 assertion 메서드들은 긍정과 부정이 쌍으로 존재

@ 기본적인 단정문들 @
- equals vs same : equals 또는 ==에 대한 검증
- 배열의 내용 검증 : 배열의 경우 equals가 재 정의 되지 않기 때문에 별도의 내용 비교 메서드 제공
- 예외에 대한 검증 : 특정 상황에서 예상하는 예외가 잘 발생하는지에 대한 검증
- 여러 assertions들을 함께 그룹핑해서 검증 : grouping 하지 않으면 중간에 실패하면 전체가 바로 종료

@ Given-When-Then 패턴 @
- BDD(Behavior Driven Developement)에서 권장되는 패턴
	given : 테스트를 위해 필요한 상황 준비(이런 상황, 객체 데이터가 주어졌을 때)
	when : 테스트하는 메서드 실행(어떤 메서드를 실행했다면)
	then : 테스트 결과 검정(어떠한 결과가 나와야 한다.)
- Junit은 애초에 BDD를 위해서 만들어지지 않았으므로 강제되는 패턴은 아님, 가급적

@ F.I.R.S.T 언칙 @
- Fast : 단위테스트는 빠르게 동작해야 한다. 목적을 단순히 설정하고 외부 환경과 무관하게 작성하는 것이 좋다.
	SpringBootTest는 편하기는 하지만 통합 테스트이므로 지양하고  @DataJpaTest 등 슬라이스 테스트를 하는 것이 좋다.
- Independent : 하나의 테스트는 이전 테스트에 의한 상태에 의존해서는 안된다.
	어떤 순서로 테스트를 하더라도 언제나 테스트는 성공해야 한다.
	만약 insert 테스트 후 select 테스트가 진행되어야 한다면 안된다.
- Repeatable : 여러 번 반복해서 테스트를 진행하더라도 동일하게 동작해야 한다.
- Self-Validating : 테스트 자체만으로 검증이 완료되어야 한다.
- Timely : TDD를 한다면 테스트는 production code 개발 전에 진행해야 한다.

@@@ Maven @@@
@ Maven @
- 메이븐 사이트 링크
- 아파치 재단에서 관리하는 SW 프로젝트 관리 도구
- POM(Project Object Model) 기반
	프로젝트의 구성요소, 빌드 설정, 의존성 관리 등을 XML에서 관리
	프로젝트의 컴파일이나 테스트 실행 시 필요한 라이브러리 및 플러그인 관리
- 주요 특징
	프로젝트 구조를 강제 : 다양한 개발 환경에서 동일한 개발 환경 구축
	중앙 집중형 라이브러리 저장소를 통한 의존성 관리 : 프로젝트 설정 시간 감소 및 의존성 관리 간소화
	빌드 생명 주기 관리 : 표준화된 빌드 생명 주기 제공

@ pom.xml의 주요 속성 @
- modelVersion : POM model의 버전으로 현재는 4.0.0으로 고정
- parent : 상위 프로젝트에 대한 정보로 상위 프로젝트의 내용을 현재 프로젝트에서 상속해 사용
- groupId : 프로젝트를 생성하는 회사의 아이디로 일반적으로 도메인 이름을 거꾸로 사용
- artifactId : 프로젝트 이름 성격으로 groupId 내에서 유일해야 함
- version : 프로젝트의 현재 버전으로 프로젝트 개발 중일 떄는 SNAPSHOT을 접미사로 사용
- packaging : 배포 파일의 패키징 유형(jar, war)
- name : 프로젝트, 프로젝트 이름
- properties : pom.xml에서 사용할 속성 선언을 선언. 주로 라이브러리의 버전을 한 군데서 관리하기 위함
- dependencies : 프로젝트와 의존 관계에 있는 라이브러리들을 관리

@ dependency와 scope
- scope : 해당 의존성을 언제 어떻게 클래스 패스에 넣을 것인가?
- compile : 기본 범위로 생략 시 적용되며 컴파일과 런타임에 모두 사용 가능




	
