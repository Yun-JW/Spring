4. AOP

@@@ { AOP 기본 컨셉 } @@@

<<< 객체 지향 vs 관점 지향>>>

<<< 기존의 Service 코드 살펴보기 >>>
- 메서드는 비지니스 로직과 다양한 부가 기능으로 구성됨

# @slf4j : Simple Logging Facade for Java
		Lombok 라이브러리에서 제공하는 애너테이션으로, 클래스에 로깅 기능을 자동으로 추가해준다.
# @Autowired : Dependency Injection을 수행할 때 사용하는 애너테이션
			필요한 객체를 스프링이 자동으로 찾아서 넣어주는 애너테이션

<<< 횡단 관심 사항 >>>
- 메서드 = 핵심 관심사항(비지니스 로직)과 횡단 관심사항(부가 로직)
- 횡단 관심사의 특징
	여러 메서드를 가로지르며 등장하는 부가 로직들
	로깅, 성능, 보안, 암호화, 일관적인 예외 처리, 트랜잭션 처리 등
	세부적으로 알아야 할 기술들이 증가 - 유지 보수 어려움
	초급 개발자가 정상적으로 모든 로직을 처리했는지 확신하기 어려움
	하지만 알고 보면 모두 비슷한 코드들

<<< AOP >>>
- Aspect Oriented Programming
- 기능을 비즈니스 로직이 아니라 필요한 개별 관점을 바라 본다
	횐당 관심의 모듈화 > 재사용 > 개발자는 비즈니스 로직에 전념

<<< 기본 용어 >>>
- target : 핵심 비지니스 로직을 포함한 빈 객체로 AOP가 적용될 대상
- aspect : 모듈화 된 횡단 관심사들에 대한 추상적인 명칭으로 하나 이상의 advice로 구성
- advice : 횡단 관심 코드를 모듈화 한 메서드
		언제 동작할 것인지에 따라 @Before, @After, @AfterRetuning, @AfterThrowing, @Around으로 구분
		pointcut, 횡단 관심사 코드(메서드 body)로 구성
- join point : advice가 동작하는 지점으로 메서드 호출, 메서드 실행, 생성자 호출 등 다양 하지만
			spring에서는 메서드 실행 시점으로 제한
- pointcut : advice를 적용할 대상을 결정하는 표현식
- weaving : aspect를 비즈니스 로직 코드에 적용하는 행위 자체

@@@ { AOP 작성과 동작 } @@@

<<< DAO가 호출될 때 전달되는 파라미터를 출력 하시오. >>>
- 핵심 관심사
	각각의 DAO에서 처리하는 메서드의 핵심 로직
- 횡단 관심사 
	무엇을 - 파라미터를 포함한 로그 출력
	언제 - 메서드가 호출 될 때
	어디서 - DAO의 메서드에 대해서
