2_Architecture_DI

@@@ 의존성과 DI @@@
- 의존성
	우리가 무언가 행동을 하기 위해 사용해야 하는 도구
	모든 사람은 반드시 세탁기를 가져야 한다고 하자!

@ 의존성을 보유하는 방법 @
- 전통적으로 의존성을 구매했지만 최근에는 렌탈 서비스가 급격히 증가!
- 이제 의존성을 구입하는 시대가 아니라 주입 받아서 쓰는 시대(구입 대신 렌탈을 하는 것과 같음)
- 렌탈 = 의존성 주입
  구매 = 의존성 생성

@ 빈의 컨테이너로써의 스프링과 DI @
- 스프링의 빈이란?
	스프링 프레임워크에 의해 생성되고 관리되는 자바 객체
	스프링은 빈의 생성, 의존 관계 설정, 객체 관리 등의 빈의 라이프 사이클을 관리
	스프링을 빈의 컨테이너라고 함
- 의존 관계란?
	어떤 객체가 비지니스로직 처리를 위해 다른 객체에 의존하는 관계 (has-a 관계)
- 의존 관계 관리를 위해 DI 개념을 사용하며 이 과정에서 제어의 역전이 발생
	스프링을 IoC(Inversion Of Control)컨테이너라고 불림
# IoC(Inversion Of Control)이란? 객체 생성과 의존성 관리를 개발자가 아니라 스프링 프레임워크가 대신해주는 개념

@ DI의 필요성 @
1. 우리는 세탁기에 의존한다!
2. 인터페이스를 이용해보면? >>> 변경 포인트가 줄어듬
3. Factory Pattern 적용하고 단지 주입 받는 걸로
#Factory pattern 이란 ? 객체 생성을 전담하는 공장처럼, 필요한 객체를 대신 만들어주는 방식

@ 최종 Spring Framework의 등장 @
- Spring WasherUser, SWasher, LWasher 같은 객체를 "빈"이라는 개념으로 관리 : Spring은 빈의 Container
	이런 빈을 만들 때 특별하게 만들 필요 없이 그냥 POJO로 만들면 됨
#POJO란? 특별한 규칙없이 일반적인 자바 객체를 의미
- Spring은 설정에 따라 WasherUser의 의존성이 Washer에 가지고 있는 빈을 주입 : DI
- 프레임워크 사용 전에는 이런 객체 관리를 개발자가 직접 컨트롤 했지만 이제 프레임워크가 컨트롤
	개발자는 프레임워크가  원하는 대로 만들어주면 알아서 처리됨 - 제어의 역전 발생 : IOC Container

@ 결국 DI란 ... @
-객체의 의존성 즉 멤버 변수를 외부에서 주입하는 것
- 멤버 변수를 설정하는 방법은?
	직접 필드에 할당 방법
	생성자를 활용하는 방법
	setter 메서드 이용 방법

@ Spring의 빈 관리 과정
1. 개발자는 POJO로 빈 작성
2. 메타 정보(빈의 생성 방법 및 관계 설정 정보)를 스프링 컨테이너에게 전달
3. 런타임에
		스프링은 메타 정보를 보고 빈 객체 생성 >>> 싱글턴 형태로 관리
		빈 관계에 정보에 따라 빈 주입 처리


@@@ 명시적 DI @@@

@ maven @
- maven 프로젝트 생성 후 스프링 framework 설치
<dependency>
	<groupId>org.springFramework</groupId>
	<artifactId>spring-context</artifactId>
	<version>6.2.2</version>
</dependency>

@ 명시적 DI @
- 빈을 생성하고 의존성을 주입하는 코드를 별도의 파일에 명시 - "이것은 빈 입니다!"
- @Configuartion
	java 기반으로 설정 파일을 만들기 위한 annotation으로 class level에 선언
	@Target(ElementType.TYPE)
	@Retention(RetentionPolicy.RUNTIME)
	@Documented
	@Component
	public @interface Configuration{ }
- @ Bean
	빈을 선언하기 위한 annotation으로 method level에 선언하며 method의 이름은 빈의 이름
	@Target({ElementType.METHOD, ElementType.ANNOTATION_TYPE})
	@Retention(RetentionPlicy.RUNTIME)
	@Documented
	public @interface bean{
		@AliasFor("name")
		String[] value() default {};
		@AliasFor("value")
		String[] name() default {};
	}
@ 메타정보의 작성
- 자료 참조

@ 빈 사용
- 자료 참조

@ 빈 조회
- 자료 참조
- Spring Container는 기본적으로 빈을 타입 기반으로 관리

@ 이제 main은 그만
	
#Assertions Class란? JUnit에서 테스트 조건을 검증할 때 사용하는 유틸리티 클래스
	즉, 테스트 결과가 기대한 대로 나왔는지 확인하는 데 쓰이는 도구 모음 클래스

@@@ 묵시적 DI @@@
- 명시적 DI 처럼 @Configuration에서 @Bean을 사용하지 않는 형태
- @Component
	빈으로 사용할 각각의 클래스들에 @Component 표시
	@Target(ElementType.TYPE)
	public @interface Component{
		String value() default "";
	}
- 기본 빈의 이름
	클래스 이름이 pascal case인 경우는 첫 글자를 소문자로 한 camel case, 그렇지 않은 경우는 클래스 이름 그대로 사용
#pascal case 란? 단어의 첫글자가 대문자인 경우

- @Component의 value 속성으로 재정의 가능

@AutoWired
- 빈을 주입하기 위해 사용되는 annotation
#annotation이란 ? 자바코드에 추가 정보를 제공하는 특수한 문법으로, 컴파일러나 프레임워크가 이를 해석해서 특정 동작을 수행하게 합니다.
- 타입 기반으로 빈 자동 주입 = 해당 빈은 반드시 하나만 존재 해야 함
	타입 충돌이 발생할 경우 : 이름 기반의 조건을 추가하기 위해 @Qualifier 활용
- 생성자와 메서드에서 사용 시 대상 파라미터는 모두 Spring Bean 또는 @Value에 의한 scalar 값
- 한 클래스에 @Autowired에 적용된 생성자는 최대 하나만 가능하면 메서드는 여러 번 사용 가능
- 생성자가 1개일 경우는 당연히 그 생성자가 호출되므로 @Autowired 생략 가능

@ ComponentScan
- @Component는 단지 "빈이 될 수 있다"는 의도로 실제 빈을 만들지는 않음
- @ComponentScan을 통해 대상 빈을 scan 해야 빈으로 등록됨
	basePackages로 scan 대상 패키지 등록(생략 시 현재 애너테이션이 사용된 클래스의 하위 패키지 scan)
- @Configuration이 선언된 클래스에 사용

@ Test
- 자료 참조

@ Qualifier
- 이름 기반으로 주입될 빈을 한정짓기 위해서 사용하는 annotation(@Autowird와 함께 사용)

@ Component
- 특별한 의미를 가지지 않은 단순히 "빈의 대상"임을 나타내는 annotation
- 스테레오타입
	용도에 따라 미리 여러 형태로 정형화 해놓은 타입
	내부적으로 @Component를 포함 - 빈으로 관리됨
	스테레오타입 애너테이션들(Repositoty, Service, Controller, Configuration, Component)

@ 주입 방식에 따른 DI 방법의 비교
- 생성자 주입: 가장 권장되는 방식
	빈의 모든 의존성이 반드시 필요하다는 것을 명시적으로 보여줌
	혹시나 발생할 수 있는 빈의 순환 의존성 문제를 빈 생성 시점에 즉시 발견 가능
	(다른 방식은 빈 생성 후 주입과정에서 발견되므로 조금 느림)
	많은 경우 field를 blank final로 선언하고 생성자 주입을 사용하는데 lombok의 @requiredArgsConstructor 활용
- setter 주입 : 선택적인 의존성을 가진 빈의 주입에 적합
- field 주입: 비추
	코드가 가장 간결하기는 하지만 테스트 시 Mock 객체를 주입하기가 어렵고 빈의 분변성을 보장하지 ㅇ낳음
	단위테스트 처럼 특별한 목적을 위해 작성된 경우에만 사용 권장

@ 설정 방식에 따른 DI 방법의 비교
- 명시적 DI
	관심사 분리 : 비즈니스 로직과 빈 관리 조직의 분리 가능(의존성 주입 코드가 명확하게 보임)
	설정 작성 : 빈 설정 코드가 복잡해질 수 있음
	외부 라이브러리를 빈으로 활용 : 가능

- 묵시적 DI
	관심사 분리 : 비지니스 로직과 빈 관리 로직의 결함
				전체적인 빈의 구조를 파악하기 어려움
				하지만 개발 툴이 잘 지원함
	설정 작성 : 개발자가 의존성 주입 코드를 작성하지 않아도 됨
	외부 라이브러리를 빈으로 활용 : 제한적
- 묵시적 DI를 기본으로 하고 명시적 DI를 보조적인 방식으로 사용


@@@ appendix @@@

@ 기타
- @bean에서 메서드의 파라미터는 자동으로 @Autowired 대체

- @Value
	객체가 아닌 스칼라 값(문자열, 숫자 등)을 주입 받는데 사용
	주로 설정 파일에 선언된 property를 참조하는 경우 사용 : ${} 내부에 property 이름 등록

@ 빈의 생명 주기
- 초기화 매서드
주요 용도 : 빈으로 사용하려는 자원의 초기화
호출 시점 : 의존성 주입 후 비지니스 로직이 호출되기 전
작성 방법 : 묵시적 빈 등록 : @PostConstruct 적용
		명시적 빈 등록 : @Bean의 initMethod 속성
주의사항 : 메서드는 파라미터가 없어야 한다.

- 소멸 메서드
주요 용도 : 빈에서 사용한 자원의 정리
호출 시점 : 모든 비지니스 로직이 종료된 후
작성 방법 : 묵시적 빈 등록 : @PreDestroy 적용
		명시적 빈 등록 : @Bean의 destroyMethod 속성
주의 사항 : 메서드는 파라미터가 없어야 한다.

@ 빈의 생명 주기
- @PostConstruct, @PreDestroy 사용을 위해서는 jakarta.annotation-apu 필요
